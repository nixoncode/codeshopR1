QUESTION 1
==========

package org.example;

import java.util.ArrayList;

public class Question1 {

    public static void main(String[] args) {
        String input = "the sky is blue";
        String input2 = "  hello world  ";
        String input3 = "a good   example";
        String input4 = "  Bob    Loves  Alice   ";
        String input5 = "Alice does not even like bob";

        System.out.println(reverseString(input));
        System.out.println(reverseString(input2));
        System.out.println(reverseString(input3));
        System.out.println(reverseString(input4));
        System.out.println(reverseString(input5));
    }

    public static String reverseString(String s) {
        s = s.replaceAll("\\s+", " ");
        String[] words = s.split(" ");
        ArrayList<String> rw = new ArrayList<>();

        for (int i = 0; i < words.length; i++) {
            rw.add(words[(words.length - 1 - i)].replaceAll("\\s+", ""));
        }
        return String.join(" ", rw);
    }
}

Question 2
==========
package org.example;

import com.google.gson.Gson;

import java.util.HashSet;
import java.util.Set;

public class Question2 {

    public static void main(String[] args) {
        int[][] example1 = {
                {1, 2, 3, 4},
                {2, 1, 4, 3},
                {3, 4, 1, 2},
                {4, 3, 2, 1},
        };
        int[][] example2 = {
                {2, 2, 2, 2},
                {2, 3, 2, 3},
                {2, 2, 2, 3},
                {2, 2, 2, 2},
        };

        processMatrix(example1);
        processMatrix(example2);
    }


    public static void processMatrix(int[][] arr) {
        int sum = sumOfDiagonals(arr);
        int rowDuplicates = rowsWithRepeatedElements(arr);
        int colDuplicates = columnsWithRepeatedElements(arr);

        int[] results = {sum, rowDuplicates, colDuplicates};
        Gson gson = new Gson();
        String jsonString = gson.toJson(results);
        System.out.println(jsonString);
    }

    public static int sumOfDiagonals(int[][] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            // as it's a 2d matrix, no need for a double loop
            sum += arr[i][i];
        }
        return sum;
    }

    public static int rowsWithRepeatedElements(int[][] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            boolean hasDuplicate = false;
            Set<Integer> seen = new HashSet<>();
            for (int j = 0; j < arr.length; j++) {
                if (!seen.add(arr[i][j])) {
                    hasDuplicate = true;
                }
            }
            if (hasDuplicate) {
                sum += 1;
            }
        }
        return sum;
    }

    public static int columnsWithRepeatedElements(int[][] arr) {
        int count = 0;

        for (int i = 0; i < arr[0].length; i++) {
            for (int j = 0; j < arr.length - 1; j++) {
                boolean hasDuplicates = false;
                for (int k = j + 1; k < arr.length; k++) {
                    if (arr[j][i] == arr[k][i]) {
                        count++;
                        hasDuplicates = true;
                        break;
                    }
                }
                if (hasDuplicates) {
                    break;
                }
            }
        }
        return count;
    }
}

Question 3
==========
package org.example;

import java.util.ArrayList;
import java.util.List;

public class Question3 {

    public static void main(String[] args) {
        int[] candidates1 = {2, 3, 6, 7};
        int target1 = 7;
        List<List<Integer>> combinations = combinationSum(candidates1, target1);
        System.out.println(combinations);

        int[] candidates2 = {2};
        int target2 = 1;
        List<List<Integer>> combinations2 = combinationSum(candidates2, target2);
        System.out.println(combinations2);
    }

    public static List<List<Integer>> combinationSum(int[] candidates, int target){
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        backtracking(candidates, target, 0, current, result);
        return result;
    }
    private static void backtracking(int[] candidates, int remainingTarget, int start, List<Integer> current, List<List<Integer>> result) {
        if (remainingTarget == 0) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = start; i < candidates.length; i++) {
            if (remainingTarget - candidates[i] >= 0) {
                current.add(candidates[i]);
                backtracking(candidates, remainingTarget - candidates[i], i, current, result);
                current.remove(current.size() - 1); // Backtrack
            }
        }
    }
}

Question 4
==========
package org.example;

import java.util.Arrays;
import java.util.Comparator;

public class Question4 {

    public static void main(String[] args) {
        int[][] interval1 = {{1,2},{2,3},{3,4},{1,3}};
        int[][] interval2 = {{1,2},{1,2},{1,2}};
        int[][] interval3 = {{1,2},{2,3}};

        System.out.println(eraseOverlapIntervals(interval1));
        System.out.println(eraseOverlapIntervals(interval2));
        System.out.println(eraseOverlapIntervals(interval3));
    }

    public static int eraseOverlapIntervals(int[][] intervals){
        if (intervals.length <= 1) {
            return 0; // No overlaps with one or fewer intervals
        }

        // Sort intervals by their end times, prioritizing earlier endings
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[1]));

        int count = 0; // Count of removed intervals
        int prevEnd = intervals[0][1]; // End time of the previous non-overlapping interval

        for (int i = 1; i < intervals.length; i++) {
            int[] current = intervals[i];
            if (current[0] >= prevEnd) { // No overlap with the previous interval
                prevEnd = current[1]; // Update the ending time
            } else {
                count++; // Overlap detected, remove the current interval
            }
        }

        return count;
    }
}
